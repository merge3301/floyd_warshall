package ui

import core.WarshallStepper
import core.WarshallStep
import javafx.geometry.Insets
import javafx.geometry.Pos
import javafx.scene.control.*
import javafx.scene.layout.HBox
import javafx.scene.layout.VBox

/**
 * –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –£–æ—Ä—à–µ–ª–ª–∞.
 *
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–ø—É—Å–∫, –ø–æ—ç—Ç–∞–ø–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –æ—Ç–∫–∞—Ç –∏ —Å–±—Ä–æ—Å –∞–ª–≥–æ—Ä–∏—Ç–º–∞, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞,
 * –∞ —Ç–∞–∫–∂–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞ –∏ –º–∞—Ç—Ä–∏—Ü—ã –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ.
 *
 * @property graphPanel –ü–∞–Ω–µ–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞ (–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä—à–∏–Ω—ã/—Ä—ë–±—Ä–∞).
 * @property matrixInput –ü–∞–Ω–µ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–≤–æ–¥–∞ –º–∞—Ç—Ä–∏—Ü—ã —Å–º–µ–∂–Ω–æ—Å—Ç–∏.
 * @property statusLabel –°—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
 * @property iterationLabel –°—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏ k, i, j.
 */
class ControlPanel(
    private val graphPanel: GraphPanel,
    private val matrixInput: MatrixInput,
    private val statusLabel: Label,
    private val iterationLabel: Label
) {
    /** –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ */
    val startButton = Button("–ó–∞–ø—É—Å–∫")
    /** –ö–Ω–æ–ø–∫–∞ —à–∞–≥–∞ –Ω–∞–∑–∞–¥ */
    val stepBack = Button("< –®–∞–≥")
    /** –ö–Ω–æ–ø–∫–∞ "–º–∞–ª–æ–≥–æ" —à–∞–≥–∞ (–ø–æ j) */
    val stepSmall = Button("–ú–∞–ª—ã–π >")
    /** –ö–Ω–æ–ø–∫–∞ "—Å—Ä–µ–¥–Ω–µ–≥–æ" —à–∞–≥–∞ (–ø–æ i) */
    val stepMedium = Button("–°—Ä–µ–¥–Ω–∏–π >>")
    /** –ö–Ω–æ–ø–∫–∞ "–∫—Ä—É–ø–Ω–æ–≥–æ" —à–∞–≥–∞ (–ø–æ k) */
    val stepBig = Button("–ö—Ä—É–ø–Ω—ã–π >>>")
    /** –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è */
    val resetButton = Button("–°–±—Ä–æ—Å")
    /** –ö–Ω–æ–ø–∫–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ */
    val runAllButton = Button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å—ë")
    /** –ö–Ω–æ–ø–∫–∞ –≤—ã–∑–æ–≤–∞ —Å–ø—Ä–∞–≤–∫–∏ */
    val helpButton = Button("–°–ø—Ä–∞–≤–∫–∞")
    /** –û–±–ª–∞—Å—Ç—å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–∞ —à–∞–≥–æ–≤ */
    val logArea = TextArea().apply {
        isEditable = false
        prefRowCount = 10
        prefHeight = 140.0
        style = "-fx-font-family: monospace; -fx-font-size: 12px;"
    }
    /** –û—Å–Ω–æ–≤–Ω–æ–µ view ‚Äî —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ –∏ –ª–æ–≥ */
    val view: VBox

    private var warshallStepper: WarshallStepper? = null
    private var finishedLogged = false

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫, –±–∏–Ω–¥–∏–Ω–≥–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π.
     * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ –∑–∞–ø—É—Å–∫—É, —à–∞–≥–∞–º, —Å–±—Ä–æ—Å—É, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∏ —Å–ø—Ä–∞–≤–∫–µ.
     */
    init {
        val controlBar = HBox(
            15.0, startButton, stepBack, stepSmall, stepMedium, stepBig, runAllButton, resetButton, helpButton
        ).apply {
            padding = Insets(10.0)
            alignment = Pos.CENTER
            style = "-fx-background-color: #f0f8ff;"
        }

        view = VBox(10.0, controlBar, logArea).apply {
            padding = Insets(10.0)
        }

        // --- –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        startButton.setOnAction {
            val matrix = matrixInput.getMatrix()
            warshallStepper = WarshallStepper(matrix)
            logArea.clear()
            finishedLogged = false
            log("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –£–æ—Ä—à–µ–ª–ª–∞")
            matrixInput.clearHeaderHighlights()
            val step = warshallStepper!!.currentStep()
            logStep(step)
            updateStep(step)
            setStepButtonsEnabled(true)
        }

        // --- –®–∞–≥–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        stepSmall.setOnAction { doSmallStep() }
        stepMedium.setOnAction { doMediumStep() }
        stepBig.setOnAction { doBigStep() }

        // --- –û—Ç–∫–∞—Ç
        stepBack.setOnAction {
            val stepper = warshallStepper
            if (stepper != null) {
                val step = stepper.stepBack()
                logStep(step)
                updateStep(step)
                if (!stepper.isFinished()) {
                    setStepButtonsEnabled(true)
                    finishedLogged = false
                }
            }
        }

        // --- –°–±—Ä–æ—Å
        resetButton.setOnAction {
            warshallStepper?.reset()
            finishedLogged = false
            log("üîÑ –ê–ª–≥–æ—Ä–∏—Ç–º —Å–±—Ä–æ—à–µ–Ω –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")
            matrixInput.clearHeaderHighlights()
            val step = warshallStepper!!.currentStep()
            logStep(step)
            updateStep(step)
            setStepButtonsEnabled(true)
        }

        // --- –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å—ë
        runAllButton.setOnAction {
            val stepper = warshallStepper
            if (stepper != null && !stepper.isFinished()) {
                while (!stepper.isFinished()) {
                    val step = stepper.stepForward()
                    logStep(step)
                }
                val step = stepper.currentStep()
                updateStep(step)
                checkFinished(stepper)
            }
        }

        // --- –°–ø—Ä–∞–≤–∫–∞
        helpButton.setOnAction {
            val alert = Alert(Alert.AlertType.INFORMATION)
            alert.title = "–°–ø—Ä–∞–≤–∫–∞"
            alert.headerText = "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ: –¢—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ (–∞–ª–≥–æ—Ä–∏—Ç–º –£–æ—Ä—à–µ–ª–ª–∞)"
            alert.contentText = """
                –≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã—á–∏—Å–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ —Å –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –£–æ—Ä—à–µ–ª–ª–∞.

                –í—ã –º–æ–∂–µ—Ç–µ:
                ‚Ä¢ –í–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ.
                ‚Ä¢ "–ó–∞–ø—É—Å–∫" ‚Äî –Ω–∞—á–∞—Ç—å –ø–æ—ç—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä.
                ‚Ä¢ "< –®–∞–≥" ‚Äî —à–∞–≥ –Ω–∞–∑–∞–¥.
                ‚Ä¢ "–ú–∞–ª—ã–π >" ‚Äî —à–∞–≥ –ø–æ j (—è—á–µ–π–∫–∞).
                ‚Ä¢ "–°—Ä–µ–¥–Ω–∏–π >>" ‚Äî —à–∞–≥ –ø–æ i (—Å—Ç—Ä–æ–∫–∞).
                ‚Ä¢ "–ö—Ä—É–ø–Ω—ã–π >>>" ‚Äî —à–∞–≥ –ø–æ k (—Å–ª–æ–π).
                ‚Ä¢ "–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å—ë" ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ –æ–¥–∏–Ω –∫–ª–∏–∫.
                ‚Ä¢ "–°–±—Ä–æ—Å" ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
                ‚Ä¢ –ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –≤ —Å—Ç–∞—Ç—É—Å–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ.
            """.trimIndent()
            alert.showAndWait()
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç —à–∞–≥–∏, –µ—Å–ª–∏ –¥–∞.
     *
     * @param stepper –¢–µ–∫—É—â–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞.
     */
    private fun checkFinished(stepper: WarshallStepper) {
        if (stepper.isFinished() && !finishedLogged) {
            finishedLogged = true
            log("‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–≤–µ—Ä—à—ë–Ω.")
            statusLabel.text = "–°—Ç–∞—Ç—É—Å: –ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–≤–µ—Ä—à—ë–Ω."
            setStepButtonsEnabled(false)
            matrixInput.clearHeaderHighlights()
        }
    }

    /**
     * –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–æ–≤.
     *
     * @param state true ‚Äî –∫–Ω–æ–ø–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã; false ‚Äî –≤—ã–∫–ª—é—á–µ–Ω—ã.
     */
    private fun setStepButtonsEnabled(state: Boolean) {
        runAllButton.isDisable = !state
        stepSmall.isDisable = !state
        stepMedium.isDisable = !state
        stepBig.isDisable = !state
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞–ª—ã–π —à–∞–≥ (stepForward).
     */
    private fun doSmallStep() {
        val stepper = warshallStepper
        if (stepper != null && !stepper.isFinished()) {
            val step = stepper.stepForward()
            logStep(step)
            updateStep(step)
            checkFinished(stepper)
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —à–∞–≥ ‚Äî –¥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É i (—Å—Ç—Ä–æ–∫–∞).
     */
    private fun doMediumStep() {
        val stepper = warshallStepper
        if (stepper != null && !stepper.isFinished()) {
            var step: WarshallStep? = null
            val startI = stepper.currentStep().i
            val startK = stepper.currentStep().k
            do {
                step = stepper.stepForward()
                if (step != null) logStep(step)
            } while (!stepper.isFinished() && (step?.i == startI && step.k == startK))
            step?.let {
                updateStep(it)
                checkFinished(stepper)
            }
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫—Ä—É–ø–Ω—ã–π —à–∞–≥ ‚Äî –¥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É k (—Å–ª–æ–π).
     */
    private fun doBigStep() {
        val stepper = warshallStepper
        if (stepper != null && !stepper.isFinished()) {
            var step: WarshallStep? = null
            val startK = stepper.currentStep().k
            do {
                step = stepper.stepForward()
                if (step != null) logStep(step)
            } while (!stepper.isFinished() && step?.k == startK)
            step?.let {
                updateStep(it)
                checkFinished(stepper)
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –º–∞—Ç—Ä–∏—Ü—ã –∏ –≥—Ä–∞—Ñ–∞ –ø–æ—Å–ª–µ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —à–∞–≥–∞.
     *
     * @param step –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (WarshallStep).
     */
    private fun updateStep(step: WarshallStep) {
        matrixInput.updateMatrixDisplay(step.matrix)
        matrixInput.clearHighlights()
        if (step.involved.isNotEmpty()) {
            matrixInput.highlightCells(step.involved)
        }
        matrixInput.highlightHeader(step.k)
        graphPanel.updateGraph(
            step.matrix,
            highlights = step.involved,
            highlightedNodes = listOf(step.i, step.j, step.k)
        )
        statusLabel.text = if (warshallStepper?.isFinished() == true)
            "–°—Ç–∞—Ç—É—Å: –ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–≤–µ—Ä—à—ë–Ω."
        else
            "–°—Ç–∞—Ç—É—Å: ${step.message}"
        iterationLabel.text = "k=${step.k + 1}, i=${step.i + 1}, j=${step.j + 1}"
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–æ–≥.
     *
     * @param message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
     */
    private fun log(message: String) {
        logArea.appendText("$message\n")
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–≥ –æ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
     *
     * @param step –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞.
     */
    private fun logStep(step: WarshallStep) {
        log("–®–∞–≥: k=${step.k + 1}, i=${step.i + 1}, j=${step.j + 1} ‚Äî ${step.message}")
    }
}
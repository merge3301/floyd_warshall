package ui

import core.WarshallStepper
import core.WarshallStep
import javafx.geometry.Insets
import javafx.geometry.Pos
import javafx.scene.control.*
import javafx.scene.layout.HBox
import javafx.scene.layout.VBox

/**
 * –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –£–æ—Ä—à–µ–ª–ª–∞.
 *
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å, –ø–æ—ç—Ç–∞–ø–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∏ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞,
 * –∞ —Ç–∞–∫–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —à–∞–≥–∏, —Å—Ç–∞—Ç—É—Å –∏ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏.
 *
 * @property graphPanel      –ü–∞–Ω–µ–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞ (–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä—à–∏–Ω—ã –∏ —Ä—ë–±—Ä–∞)
 * @property matrixInput     –ü–∞–Ω–µ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–≤–æ–¥–∞ –º–∞—Ç—Ä–∏—Ü—ã —Å–º–µ–∂–Ω–æ—Å—Ç–∏
 * @property statusLabel     Label –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @property iterationLabel  Label –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ k, i, j
 */
class ControlPanel(
    private val graphPanel: GraphPanel,
    private val matrixInput: MatrixInput,
    private val statusLabel: Label,
    private val iterationLabel: Label
) {
    /** –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ */
    val startButton = Button("–ó–∞–ø—É—Å–∫")
    /** –ö–Ω–æ–ø–∫–∞ —à–∞–≥–∞ –Ω–∞–∑–∞–¥ (–æ—Ç–∫–∞—Ç –Ω–∞ 1 –∏—Ç–µ—Ä–∞—Ü–∏—é) */
    val stepBack   = Button("< –®–∞–≥")
    /** –ö–Ω–æ–ø–∫–∞ –º–∞–ª—ã–π —à–∞–≥ ‚Äî –æ–¥–∏–Ω —à–∞–≥ –ø–æ j */
    val stepSmall  = Button("–ú–∞–ª—ã–π >")
    /** –ö–Ω–æ–ø–∫–∞ —Å—Ä–µ–¥–Ω–∏–π —à–∞–≥ ‚Äî –ø—Ä–æ–π—Ç–∏ —Å—Ç—Ä–æ–∫—É (i —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω, —à–∞–≥–∏ –ø–æ j) */
    val stepMedium = Button("–°—Ä–µ–¥–Ω–∏–π >>")
    /** –ö–Ω–æ–ø–∫–∞ –∫—Ä—É–ø–Ω—ã–π —à–∞–≥ ‚Äî –ø—Ä–æ–π—Ç–∏ —Å–ª–æ–π (k —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω, —à–∞–≥–∏ –ø–æ i/j) */
    val stepBig    = Button("–ö—Ä—É–ø–Ω—ã–π >>>")
    /** –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤–µ—Ä–Ω—É—Ç—å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –≤–∏–¥—É) */
    val resetButton= Button("–°–±—Ä–æ—Å")
    /** –ö–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ */
    val runAllButton = Button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å—ë")
    /** –ö–Ω–æ–ø–∫–∞ –≤—ã–∑–æ–≤–∞ –æ–∫–Ω–∞ —Å–ø—Ä–∞–≤–∫–∏ */
    val helpButton = Button("–°–ø—Ä–∞–≤–∫–∞")

    /** –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–∞ —à–∞–≥–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ */
    val logArea = TextArea().apply {
        isEditable = false
        prefRowCount = 10
        prefHeight = 140.0
        style = "-fx-font-family: monospace; -fx-font-size: 12px;"
    }

    /** –ö–æ—Ä–Ω–µ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */
    val view: VBox

    private var stepper: WarshallStepper? = null
    private var finishedLogged = false

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏: –∫–Ω–æ–ø–∫–∏, –±–∏–Ω–¥–∏–Ω–≥–∏, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π.
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∑–∞–ø—É—Å–∫, —à–∞–≥–∏, —Å–±—Ä–æ—Å, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —Å–ø—Ä–∞–≤–∫—É.
     */
    init {
        val bar = HBox(
            15.0,
            startButton, stepBack, stepSmall, stepMedium, stepBig, runAllButton, resetButton, helpButton
        ).apply {
            padding = Insets(10.0)
            alignment = Pos.CENTER
            style = "-fx-background-color: #f0f8ff;"
        }
        view = VBox(10.0, bar, logArea).apply { padding = Insets(10.0) }

        // --- –∑–∞–ø—É—Å–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ---
        startButton.setOnAction {
            stepper = WarshallStepper(matrixInput.getMatrix()).also { st ->
                logArea.clear()
                finishedLogged = false
                log("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –£–æ—Ä—à–µ–ª–ª–∞")
                matrixInput.clearHeaderHighlights()
                updateStep(st.currentStep())
                setStepButtonsEnabled(true)
            }
        }

        // --- –ø–æ—à–∞–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ---
        stepSmall.setOnAction { doSmallStep() }
        stepMedium.setOnAction { doMediumStep() }
        stepBig.setOnAction { doBigStep() }
        stepBack.setOnAction  { doBack() }

        // --- —Å–±—Ä–æ—Å ---
        resetButton.setOnAction {
            stepper?.reset()
            finishedLogged = false
            log("üîÑ –ê–ª–≥–æ—Ä–∏—Ç–º —Å–±—Ä–æ—à–µ–Ω")
            matrixInput.clearHeaderHighlights()
            stepper?.currentStep()?.let { updateStep(it) }
            setStepButtonsEnabled(true)
        }

        // --- –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ –∫–æ–Ω—Ü–∞ ---
        runAllButton.setOnAction {
            val st = stepper ?: return@setOnAction
            while (!st.isFinished()) { logStep(st.stepForward()) }
            updateStep(st.currentStep())
            checkFinished(st)
        }

        // --- —Å–ø—Ä–∞–≤–∫–∞ ---
        helpButton.setOnAction { showHelp() }
    }

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–æ–≥–∏–∫–∞ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞–ª—ã–π —à–∞–≥ (–æ–¥–Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ j).
     */
    private fun doSmallStep() {
        stepper?.let { if (!it.isFinished()) { updateStep(it.stepForward()); checkFinished(it) } }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —à–∞–≥ –Ω–∞–∑–∞–¥ (–æ—Ç–∫–∞—Ç –Ω–∞ –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é).
     */
    private fun doBack() {
        stepper?.let {
            updateStep(it.stepBack())
            finishedLogged = false
            setStepButtonsEnabled(true)
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —à–∞–≥ (–¥–æ —Å–º–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ i).
     */
    private fun doMediumStep() {
        val st = stepper ?: return
        if (st.isFinished()) return
        val startI = st.currentStep().i
        val startK = st.currentStep().k
        var step: WarshallStep
        do {
            step = st.stepForward()
            logStep(step)
        } while (!st.isFinished() && step.i == startI && step.k == startK)
        updateStep(step)
        checkFinished(st)
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫—Ä—É–ø–Ω—ã–π —à–∞–≥ (–¥–æ —Å–º–µ–Ω—ã —Å–ª–æ—è k).
     */
    private fun doBigStep() {
        val st = stepper ?: return
        if (st.isFinished()) return
        val startK = st.currentStep().k
        var step: WarshallStep
        do {
            step = st.stepForward()
            logStep(step)
        } while (!st.isFinished() && step.k == startK)
        updateStep(step)
        checkFinished(st)
    }

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –º–∞—Ç—Ä–∏—Ü—ã –∏ –≥—Ä–∞—Ñ–∞ –ø–æ—Å–ª–µ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —à–∞–≥–∞.
     *
     * @param step –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (WarshallStep)
     */
    private fun updateStep(step: WarshallStep) {
        matrixInput.updateMatrixDisplay(step.matrix)
        matrixInput.clearHighlights()

        // —É–±–∏—Ä–∞–µ–º –ø—É–Ω–∫—Ç–∏—Ä—ã, —Å—Ç–∞–≤—à–∏–µ –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ —Ä—ë–±—Ä–∞–º–∏
        val filtered = step.involved.filterNot { (i, j, t) ->
            t == "candidate" && step.matrix[i][j] == 1
        }
        if (filtered.isNotEmpty()) matrixInput.highlightCells(filtered)
        matrixInput.highlightHeader(step.k)

        graphPanel.updateGraph(
            step.matrix,
            highlights = filtered,
            highlightedNodes = listOf(step.i, step.j, step.k)
        )

        statusLabel.text = if (stepper?.isFinished() == true)
            "–°—Ç–∞—Ç—É—Å: –ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–≤–µ—Ä—à—ë–Ω."
        else
            "–°—Ç–∞—Ç—É—Å: ${step.message}"
        iterationLabel.text = "k=${step.k + 1}, i=${step.i + 1}, j=${step.j + 1}"
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç —à–∞–≥–∏, –µ—Å–ª–∏ –¥–∞.
     *
     * @param st –≠–∫–∑–µ–º–ø–ª—è—Ä WarshallStepper
     */
    private fun checkFinished(st: WarshallStepper) {
        if (st.isFinished() && !finishedLogged) {
            finishedLogged = true
            log("‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–≤–µ—Ä—à—ë–Ω.")
            statusLabel.text = "–°—Ç–∞—Ç—É—Å: –ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–≤–µ—Ä—à—ë–Ω."
            setStepButtonsEnabled(false)
            matrixInput.clearHeaderHighlights()
        }
    }

    /**
     * –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–æ–≤.
     *
     * @param state true ‚Äî –∫–Ω–æ–ø–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã, false ‚Äî –æ—Ç–∫–ª—é—á–µ–Ω—ã
     */
    private fun setStepButtonsEnabled(state: Boolean) {
        runAllButton.isDisable = !state
        stepSmall.isDisable = !state
        stepMedium.isDisable = !state
        stepBig.isDisable = !state
    }

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥.
     *
     * @param msg –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private fun log(msg: String) = logArea.appendText("$msg\n")

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ.
     *
     * @param s WarshallStep –¥–ª—è –ª–æ–≥–∞
     */
    private fun logStep(s: WarshallStep) = log("–®–∞–≥: k=${s.k + 1}, i=${s.i + 1}, j=${s.j + 1} ‚Äî ${s.message}")

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ –æ–∫–Ω–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
     */
    private fun showHelp() {
        Alert(Alert.AlertType.INFORMATION).apply {
            title = "–°–ø—Ä–∞–≤–∫–∞"
            headerText = "–ê–ª–≥–æ—Ä–∏—Ç–º –£–æ—Ä—à–µ–ª–ª–∞"
            contentText = """
                ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü—É —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –µ—ë.
                ‚Ä¢ "–ó–∞–ø—É—Å–∫" ‚Äì –ø–æ–∫–∞–¥—Ä–æ–≤—ã–π —Ä–µ–∂–∏–º.
                ‚Ä¢ –ö–Ω–æ–ø–∫–∏ –ú–∞–ª—ã–π/–°—Ä–µ–¥–Ω–∏–π/–ö—Ä—É–ø–Ω—ã–π ‚Äì —à–∞–≥–∏ –ø–æ j / i / k.
                ‚Ä¢ "–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å—ë" ‚Äì —Å—Ä–∞–∑—É —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
                ‚Ä¢ "–°–±—Ä–æ—Å" ‚Äì –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.
            """.trimIndent()
        }.showAndWait()
    }
}
package ui

import core.WarshallStepper
import core.WarshallStep
import javafx.geometry.Insets
import javafx.geometry.Pos
import javafx.scene.control.*
import javafx.scene.layout.HBox
import javafx.scene.layout.VBox

class ControlPanel(
    private val graphPanel: GraphPanel,
    private val matrixInput: MatrixInput,
    private val statusLabel: Label,
    private val iterationLabel: Label
) {
    val startButton = Button("–ó–∞–ø—É—Å–∫")
    val stepBack = Button("< –®–∞–≥")
    val stepSmall = Button("–ú–∞–ª—ã–π >")     // –ø–æ j
    val stepMedium = Button("–°—Ä–µ–¥–Ω–∏–π >>") // –ø–æ i
    val stepBig = Button("–ö—Ä—É–ø–Ω—ã–π >>>")   // –ø–æ k
    val resetButton = Button("–°–±—Ä–æ—Å")
    val runAllButton = Button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å—ë")
    val helpButton = Button("–°–ø—Ä–∞–≤–∫–∞")
    val logArea = TextArea().apply {
        isEditable = false
        prefRowCount = 10
        prefHeight = 140.0
        style = "-fx-font-family: monospace; -fx-font-size: 12px;"
    }
    val view: VBox

    private var warshallStepper: WarshallStepper? = null
    private var finishedLogged = false

    init {
        val controlBar = HBox(
            15.0, startButton, stepBack, stepSmall, stepMedium, stepBig, runAllButton, resetButton, helpButton
        ).apply {
            padding = Insets(10.0)
            alignment = Pos.CENTER
            style = "-fx-background-color: #f0f8ff;"
        }

        view = VBox(10.0, controlBar, logArea).apply {
            padding = Insets(10.0)
        }

        startButton.setOnAction {
            val matrix = matrixInput.getMatrix()
            warshallStepper = WarshallStepper(matrix)
            logArea.clear()
            finishedLogged = false
            log("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –£–æ—Ä—à–µ–ª–ª–∞")
            matrixInput.clearHeaderHighlights()
            val step = warshallStepper!!.currentStep()
            logStep(step)
            updateStep(step)
            setStepButtonsEnabled(true)
        }

        stepSmall.setOnAction { doSmallStep() }
        stepMedium.setOnAction { doMediumStep() }
        stepBig.setOnAction { doBigStep() }

        stepBack.setOnAction {
            val stepper = warshallStepper
            if (stepper != null) {
                val step = stepper.stepBack()
                logStep(step)
                updateStep(step)
                if (!stepper.isFinished()) {
                    setStepButtonsEnabled(true)
                    finishedLogged = false
                }
            }
        }

        resetButton.setOnAction {
            warshallStepper?.reset()
            finishedLogged = false
            log("üîÑ –ê–ª–≥–æ—Ä–∏—Ç–º —Å–±—Ä–æ—à–µ–Ω –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")
            matrixInput.clearHeaderHighlights()
            val step = warshallStepper!!.currentStep()
            logStep(step)
            updateStep(step)
            setStepButtonsEnabled(true)
        }

        runAllButton.setOnAction {
            val stepper = warshallStepper
            if (stepper != null && !stepper.isFinished()) {
                while (!stepper.isFinished()) {
                    val step = stepper.stepForward()
                    logStep(step)
                }
                val step = stepper.currentStep()
                updateStep(step)
                checkFinished(stepper)
            }
        }

        helpButton.setOnAction {
            val alert = Alert(Alert.AlertType.INFORMATION)
            alert.title = "–°–ø—Ä–∞–≤–∫–∞"
            alert.headerText = "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ: –¢—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ (–∞–ª–≥–æ—Ä–∏—Ç–º –£–æ—Ä—à–µ–ª–ª–∞)"
            alert.contentText = """
                –≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã—á–∏—Å–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ —Å –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –£–æ—Ä—à–µ–ª–ª–∞.

                –í—ã –º–æ–∂–µ—Ç–µ:
                ‚Ä¢ –í–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ.
                ‚Ä¢ "–ó–∞–ø—É—Å–∫" ‚Äî –Ω–∞—á–∞—Ç—å –ø–æ—ç—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä.
                ‚Ä¢ "< –®–∞–≥" ‚Äî —à–∞–≥ –Ω–∞–∑–∞–¥.
                ‚Ä¢ "–ú–∞–ª—ã–π >" ‚Äî —à–∞–≥ –ø–æ j (—è—á–µ–π–∫–∞).
                ‚Ä¢ "–°—Ä–µ–¥–Ω–∏–π >>" ‚Äî —à–∞–≥ –ø–æ i (—Å—Ç—Ä–æ–∫–∞).
                ‚Ä¢ "–ö—Ä—É–ø–Ω—ã–π >>>" ‚Äî —à–∞–≥ –ø–æ k (—Å–ª–æ–π).
                ‚Ä¢ "–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å—ë" ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ –æ–¥–∏–Ω –∫–ª–∏–∫.
                ‚Ä¢ "–°–±—Ä–æ—Å" ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
                ‚Ä¢ –ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –≤ —Å—Ç–∞—Ç—É—Å–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ.
            """.trimIndent()
            alert.showAndWait()
        }
    }

    private fun checkFinished(stepper: WarshallStepper) {
        if (stepper.isFinished() && !finishedLogged) {
            finishedLogged = true
            log("‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–≤–µ—Ä—à—ë–Ω.")
            statusLabel.text = "–°—Ç–∞—Ç—É—Å: –ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–≤–µ—Ä—à—ë–Ω."
            setStepButtonsEnabled(false)
            matrixInput.clearHeaderHighlights()
        }
    }

    private fun setStepButtonsEnabled(state: Boolean) {
        runAllButton.isDisable = !state
        stepSmall.isDisable = !state
        stepMedium.isDisable = !state
        stepBig.isDisable = !state
    }

    private fun doSmallStep() {
        val stepper = warshallStepper
        if (stepper != null && !stepper.isFinished()) {
            val step = stepper.stepForward()
            logStep(step)
            updateStep(step)
            checkFinished(stepper)
        }
    }

    private fun doMediumStep() {
        val stepper = warshallStepper
        if (stepper != null && !stepper.isFinished()) {
            var step: WarshallStep? = null
            val startI = stepper.currentStep().i
            val startK = stepper.currentStep().k
            do {
                step = stepper.stepForward()
                if (step != null) logStep(step)
            } while (!stepper.isFinished() && (step?.i == startI && step.k == startK))
            step?.let {
                updateStep(it)
                checkFinished(stepper)
            }
        }
    }

    private fun doBigStep() {
        val stepper = warshallStepper
        if (stepper != null && !stepper.isFinished()) {
            var step: WarshallStep? = null
            val startK = stepper.currentStep().k
            do {
                step = stepper.stepForward()
                if (step != null) logStep(step)
            } while (!stepper.isFinished() && step?.k == startK)
            step?.let {
                updateStep(it)
                checkFinished(stepper)
            }
        }
    }

    private fun updateStep(step: WarshallStep) {
        matrixInput.updateMatrixDisplay(step.matrix)
        matrixInput.clearHighlights()
        if (step.involved.isNotEmpty()) {
            matrixInput.highlightCells(step.involved)
        }
        matrixInput.highlightHeader(step.k)  // <-- –ü–æ–¥—Å–≤–µ—Ç–∫–∞ k
        graphPanel.updateGraph(
            step.matrix,
            highlights = step.involved,
            highlightedNodes = listOf(step.i, step.j, step.k)
        )
        statusLabel.text = if (warshallStepper?.isFinished() == true)
            "–°—Ç–∞—Ç—É—Å: –ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–≤–µ—Ä—à—ë–Ω."
        else
            "–°—Ç–∞—Ç—É—Å: ${step.message}"
        iterationLabel.text = "k=${step.k + 1}, i=${step.i + 1}, j=${step.j + 1}"
    }

    private fun log(message: String) {
        logArea.appendText("$message\n")
    }

    private fun logStep(step: WarshallStep) {
        log("–®–∞–≥: k=${step.k + 1}, i=${step.i + 1}, j=${step.j + 1} ‚Äî ${step.message}")
    }
}